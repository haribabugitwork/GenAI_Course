import PyPDF2
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER
import tempfile
import os
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

class PDFProcessor:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom styles for PDF generation"""
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=16,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor='darkblue'
        )
        
        self.summary_style = ParagraphStyle(
            'CustomBody',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=12,
            alignment=TA_JUSTIFY,
            leftIndent=20,
            rightIndent=20
        )
    
    def extract_text(self, pdf_path: str) -> str:
        """
        Extract text from PDF file
        """
        try:
            with open(pdf_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                text = ""
                
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    text += page.extract_text() + "\n"
                
                logger.info(f"Successfully extracted text from {len(pdf_reader.pages)} pages")
                return text.strip()
        
        except Exception as e:
            logger.error(f"Error extracting text from PDF: {str(e)}")
            raise Exception(f"Failed to extract text from PDF: {str(e)}")
    
    def create_summary_pdf(self, summary_text: str, title: str = "Document Summary") -> str:
        """
        Create a PDF file from summary text
        """
        try:
            # Create temporary file for the summary PDF
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf", dir="/tmp") as temp_file:
                summary_pdf_path = temp_file.name
            
            # Create PDF document
            doc = SimpleDocTemplate(
                summary_pdf_path,
                pagesize=A4,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=18
            )
            
            # Build content
            story = []
            
            # Add title
            title_para = Paragraph(title, self.title_style)
            story.append(title_para)
            story.append(Spacer(1, 20))
            
            # Add summary content
            # Split text into paragraphs for better formatting
            paragraphs = summary_text.split('\n\n')
            
            for para_text in paragraphs:
                if para_text.strip():
                    # Clean and format the text
                    cleaned_text = para_text.strip().replace('\n', ' ')
                    para = Paragraph(cleaned_text, self.summary_style)
                    story.append(para)
                    story.append(Spacer(1, 12))
            
            # Add footer
            footer_style = ParagraphStyle(
                'Footer',
                parent=self.styles['Normal'],
                fontSize=8,
                alignment=TA_CENTER,
                textColor='gray'
            )
            
            story.append(Spacer(1, 20))
            footer = Paragraph("Generated by PDF Summarizer AI", footer_style)
            story.append(footer)
            
            # Build PDF
            doc.build(story)
            
            logger.info(f"Summary PDF created successfully at {summary_pdf_path}")
            return summary_pdf_path
        
        except Exception as e:
            logger.error(f"Error creating summary PDF: {str(e)}")
            raise Exception(f"Failed to create summary PDF: {str(e)}")
    
    def get_pdf_info(self, pdf_path: str) -> dict:
        """
        Get basic information about the PDF
        """
        try:
            with open(pdf_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                
                info = {
                    "num_pages": len(pdf_reader.pages),
                    "metadata": pdf_reader.metadata if pdf_reader.metadata else {},
                    "file_size": os.path.getsize(pdf_path)
                }
                
                return info
        
        except Exception as e:
            logger.error(f"Error getting PDF info: {str(e)}")
            return {"error": str(e)}